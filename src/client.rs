// Rust JSON-RPC Library
// Written in 2015 by
//     Andrew Poelstra <apoelstra@wpsoftware.net>
//
// To the extent possible under law, the author(s) have dedicated all
// copyright and related and neighboring rights to this software to
// the public domain worldwide. This software is distributed without
// any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication
// along with this software.
// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
//

//! # Client support
//!
//! Support for connecting to JSONRPC servers over HTTP, sending requests,
//! and parsing responses
//!

use std::sync::{Arc, Mutex};
use std::{error, io};

use base64;
use http;
use serde_json;

use super::{Request, Response};
use error::Error;

/// An interface for an HTTP roundtripper that handles HTTP requests.
pub trait HttpRoundTripper {
    /// The type of the http::Response body.
    type ResponseBody: io::Read;
    /// The type for errors generated by the roundtripper.
    type Err: error::Error;

    /// Make an HTTP request.  In practice only POST request will be made.
    fn request(
        &self,
        http::Request<&[u8]>,
    ) -> Result<http::Response<Self::ResponseBody>, Self::Err>;
}

/// A handle to a remote JSONRPC server
pub struct Client<R: HttpRoundTripper> {
    url: String,
    user: Option<String>,
    pass: Option<String>,
    roundtripper: R,
    nonce: Arc<Mutex<u64>>,
}

impl<R: HttpRoundTripper + 'static> Client<R> {
    /// Creates a new client
    pub fn new(
        roundtripper: R,
        url: String,
        user: Option<String>,
        pass: Option<String>,
    ) -> Client<R> {
        // Check that if we have a password, we have a username; other way around is ok
        debug_assert!(pass.is_none() || user.is_some());

        Client {
            url: url,
            user: user,
            pass: pass,
            roundtripper: roundtripper,
            nonce: Arc::new(Mutex::new(0)),
        }
    }

    /// Sends a request to a client
    pub fn send_request(&self, request: &Request) -> Result<Response, Error> {
        // Build request
        let request_raw = serde_json::to_vec(request)?;

        // Send request
        let mut request_builder = http::Request::post(&self.url);

        // Set Authorization header
        if let Some(ref user) = self.user {
            let mut auth = user.clone();
            auth.push(':');
            if let Some(ref pass) = self.pass {
                auth.push_str(&pass[..]);
            }
            let value = format!("Basic {}", &base64::encode(auth.as_bytes()));
            request_builder.header("Authorization", value);
        }

        // Errors only on invalid header or builder reuse.
        let http_request = request_builder.body(&request_raw[..]).unwrap();

        let http_response =
            self.roundtripper.request(http_request).map_err(|e| Error::Http(Box::new(e)))?;

        // nb we ignore stream.status since we expect the body
        // to contain information about any error
        let response: Response = serde_json::from_reader(http_response.into_body())?;
        if response.jsonrpc != None && response.jsonrpc != Some(From::from("2.0")) {
            return Err(Error::VersionMismatch);
        }
        if response.id != request.id {
            return Err(Error::NonceMismatch);
        }
        Ok(response)
    }

    /// Builds a request
    pub fn build_request(&self, name: String, params: Vec<serde_json::Value>) -> Request {
        let mut nonce = self.nonce.lock().unwrap();
        *nonce += 1;
        Request {
            method: name,
            params: params,
            id: From::from(*nonce),
            jsonrpc: Some(String::from("2.0")),
        }
    }

    /// Accessor for the last-used nonce
    pub fn last_nonce(&self) -> u64 {
        *self.nonce.lock().unwrap()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::io;

    struct RT();
    impl HttpRoundTripper for RT {
        type ResponseBody = io::Empty;
        type Err = io::Error;

        fn request(
            &self,
            _: http::Request<&[u8]>,
        ) -> Result<http::Response<Self::ResponseBody>, Self::Err> {
            Err(io::ErrorKind::Other.into())
        }
    }

    #[test]
    fn sanity() {
        let client = Client::new(RT(), "localhost".to_owned(), None, None);
        assert_eq!(client.last_nonce(), 0);
        let req1 = client.build_request("test".to_owned(), vec![]);
        assert_eq!(client.last_nonce(), 1);
        let req2 = client.build_request("test".to_owned(), vec![]);
        assert_eq!(client.last_nonce(), 2);
        assert!(req1 != req2);
    }
}
